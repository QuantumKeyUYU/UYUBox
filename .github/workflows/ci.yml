---
name: CI (Paranoid Stage 0)

on:
  push:
    branches:
      - main
    tags:
      - 'v*.*.*'
  pull_request:
    branches:
      - main

env:
  PYTHON_VERSION: '3.13'

jobs:
  # ‚îÄ‚îÄ‚îÄ –®–ê–ì 1: Lint ‚Üí Type ‚Üí Test ‚Üí Coverage ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
  lint_and_test:
    name: Lint & Test & Coverage
    runs-on: ubuntu-latest
    steps:
      - name: üõé Checkout repository
        uses: actions/checkout@v4

      - name: ‚öôÔ∏è Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: üöß Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: üì¶ Install dependencies (dev)
        run: |
          python -m pip install --upgrade pip setuptools wheel
          if [ -f requirements-dev.txt ]; then
            python -m pip install -r requirements-dev.txt
          else
            python -m pip install \
              pre-commit \
              ruff \
              black \
              isort \
              mypy \
              pytest \
              coverage \
              syft \
              semgrep \
              cosign
          fi

      - name: üîç Run pre-commit hooks
        run: pre-commit run --all-files

      - name: üîç Run ruff (lint)
        run: ruff check .

      - name: üîç Run black (format check)
        run: black --check .

      - name: üîç Run isort (import order)
        run: isort --check-only .

      - name: üîç Run mypy (type check)
        run: mypy src

      - name: üß™ Run pytest with coverage
        run: |
          pytest --maxfail=1 --disable-warnings -q --cov=src
          coverage xml -o coverage.xml
          coverage html -d htmlcov

      - name: üìÅ Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: |
            coverage.xml
            htmlcov/

  # ‚îÄ‚îÄ‚îÄ –®–ê–ì 2: SBOM ‚Üí Grype / Trivy ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
  sbom_scan:
    name: SBOM ‚Üí Grype / Trivy
    needs: lint_and_test
    runs-on: ubuntu-latest
    steps:
      - name: üõé Checkout repository
        uses: actions/checkout@v4

      - name: ‚öôÔ∏è Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: üì¶ Install Syft / Trivy / Grype (–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∫—Ä–∏–ø—Ç—ã)
        run: |
          # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Syft
          curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh \
            | sh -s -- -b /usr/local/bin

          # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Trivy
          curl -sSfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh \
            | sh -s -- -b /usr/local/bin

          # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Grype
          curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh \
            | sh -s -- -b /usr/local/bin

      - name: ‚öôÔ∏è Generate SBOM (CycloneDX JSON, –∏—Å–∫–ª—é—á–∞–µ–º `.github`)
        run: syft . -o cyclonedx-json=sbom.json -x .github

      - name: üîç Scan SBOM with Grype (fail on medium)
        run: grype sbom:sbom.json --fail-on medium

      - name: üîç Scan filesystem with Trivy (High / Critical)
        run: |
          trivy sbom --format cyclonedx --output sbom-cdx.json .
          trivy fs --severity HIGH,CRITICAL --exit-code 1 .

      - name: üè∑ Upload SBOM
        uses: actions/upload-artifact@v4
        with:
          name: sbom-json
          path: sbom.json

  # ‚îÄ‚îÄ‚îÄ –®–ê–ì 3: Semgrep Static Analysis ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
  semgrep_scan:
    name: Semgrep Static Analysis
    needs: sbom_scan
    runs-on: ubuntu-latest
    steps:
      - name: üõé Checkout repository
        uses: actions/checkout@v4

      - name: üì¶ Install Semgrep
        run: python -m pip install semgrep

      - name: üîç Run Semgrep (OSS rules)
        uses: returntocorp/semgrep-action@v2
        with:
          config: 'p/ci'

  # ‚îÄ‚îÄ‚îÄ –®–ê–ì 4: CodeQL Analysis ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
  codeql_analysis:
    name: CodeQL Analysis
    needs: semgrep_scan
    runs-on: ubuntu-latest
    steps:
      - name: üõé Checkout repository
        uses: actions/checkout@v4

      - name: üì¶ Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: python

      - name: üõ† Autobuild (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è Python)
        uses: github/codeql-action/autobuild@v3

      - name: üîç Run CodeQL queries
        uses: github/codeql-action/analyze@v3

  # ‚îÄ‚îÄ‚îÄ –®–ê–ì 5: Sign & Release (—Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Ç–µ–≥–∞—Ö v*) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
  sign_and_release:
    name: Sign Artifacts & Publish Release
    if: startsWith(github.ref, 'refs/tags/v')
    needs: codeql_analysis
    runs-on: ubuntu-latest
    env:
      COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}
      VAULT_ADDR:       ${{ secrets.VAULT_ADDR }}
      VAULT_TOKEN:      ${{ secrets.VAULT_TOKEN }}
    steps:
      - name: üõé Checkout repository
        uses: actions/checkout@v4

      - name: ‚öôÔ∏è Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: üì¶ Install build tools
        run: |
          python -m pip install --upgrade pip setuptools wheel build
          python -m pip install cosign

      - name: üîê (Optional) Fetch Cosign key from Vault
        if: ${{ env.VAULT_ADDR && env.VAULT_TOKEN }}
        uses: hashicorp/vault-action@v2
        id: vault
        with:
          url:    ${{ env.VAULT_ADDR }}
          method: token
          token:  ${{ env.VAULT_TOKEN }}
          path:   secret/data/cosign

      - name: üì• Write Cosign Private Key
        if: steps.vault.outputs['secret/data/cosign']
        run: |
          echo "${{ steps.vault.outputs['secret/data/cosign'] }}" | base64 --decode > cosign.key
          chmod 600 cosign.key

      - name: üì¶ Build Python packages
        run: python -m build

      - name: üìù Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body: |
            –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–ª–∏–∑ –ø–æ —Ç–µ–≥—É ${{ github.ref_name }}.
            ‚Äì ‚úÖ –í—Å–µ –ª–∏–Ω—Ç—ã, —Ç–∏–ø–∏–∑–∞—Ü–∏—è, —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã  
            ‚Äì ‚úÖ SBOM + Grype/Trivy: –Ω–µ—Ç —Ä–∏—Å–∫–æ–≤ ‚â• medium  
            ‚Äì ‚úÖ Semgrep, CodeQL  
            ‚Äì üìë –ü–æ–¥–ø–∏—Å—å –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ —á–µ—Ä–µ–∑ Cosign

      - name: üîè Sign artifacts with Cosign
        run: cosign sign --key cosign.key dist/*.tar.gz dist/*.whl

      - name: üè∑ Upload signed artifacts to Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          files: |
            dist/*.tar.gz
            dist/*.whl
            cosign.pub

      - name: ‚û°Ô∏è Update badges in README.md
        run: |
          echo "‚úÖ –†–µ–ª–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω. –ü—Ä–æ–≤–µ—Ä—å –∏ –æ–±–Ω–æ–≤–∏ –±–µ–π–¥–∂–∏ –≤ README."  
