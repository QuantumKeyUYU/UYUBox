# .github/workflows/ci.yml
#
# CI — линтеры, тесты, покрытие, security (SBOM, Grype/Trivy), REUSE и подпись артефактов

name: CI — lint/pytest/coverage/security/sign

# Разрешаем Actions читать/писать нужные ресурсы
permissions:
  actions: read
  contents: read
  security-events: write

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  # Жестко фиксируем версии Syft/Grype, чтобы не поймать 404 при выходе новых релизов
  SYFT_VERSION: "0.83.0"
  GRYPE_VERSION: "0.88.0"
  TRIVY_VERSION: "0.49.0"   # подгоняйте под актуальную версию в момент чтения
  COSIGN_VERSION: "2.1.0"   # версия cosign для подписи артефактов
  # Имя секрета в GitHub Secrets, где хранится приватный ключ cosign
  COSIGN_KEY_SECRET: "COSIGN_PRIVATE_KEY"

jobs:
  # ────────────────────────────────────────────────────────────────────────────
  # 1) Линт, форматирование, isort
  # ────────────────────────────────────────────────────────────────────────────
  lint-format:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.12 (для линтеров)
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install linters
        run: |
          pip install black ruff isort

      - name: Black (check-only)
        run: |
          black --check src tests

      - name: Ruff (check-only)
        run: |
          ruff check src tests

      - name: isort (check-only)
        run: |
          isort --check-only src tests

  # ────────────────────────────────────────────────────────────────────────────
  # 2) Тесты + покрытие (pytest → upload coverage)
  # ────────────────────────────────────────────────────────────────────────────
  pytest-coverage:
    needs: lint-format
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [ '3.10', '3.11', '3.12', '3.13' ]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          pip install -r requirements-dev.txt
          pip install .

      - name: Run pytest with coverage
        run: |
          pytest

      - name: Upload coverage XML
        uses: actions/upload-artifact@v4
        with:
          name: coverage-xml-${{ matrix.python-version }}
          path: coverage.xml

      - name: Upload coverage HTML
        uses: actions/upload-artifact@v4
        with:
          name: htmlcov-${{ matrix.python-version }}
          path: htmlcov

  # ────────────────────────────────────────────────────────────────────────────
  # 3) Security checks + подпись пакетов
  # ────────────────────────────────────────────────────────────────────────────
  security-and-sign:
    needs: pytest-coverage
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      ###########################################################################
      # 3.0 (опционально) — Fetch secrets из Vault (HashiCorp Vault / AWS SM)
      ###########################################################################
      - name: Fetch secrets from Vault (пример)
        if: ${{ false }}  # <- если вы хотите подключить Vault, поставьте true
        run: |
          # (пример для HashiCorp Vault)
          # Этот шаг ничего не делает, пока if=false.
          # Чтобы включить, заведите секрет VAULT_TOKEN в GitHub Secrets.
          vault login "$VAULT_TOKEN"
          vault kv get -field=cosign_key secret/data/mypath/cosign > cosign.key

      ###########################################################################
      # 3.1 Устанавливаем Syft, Grype, Trivy, Cosign и Python-инструменты
      ###########################################################################
      - name: Install system dependencies (Syft, Grype, Trivy, Cosign) and Python tools
        run: |
          set -exo pipefail

          # ── Устанавливаем Syft (для генерации SBOM) ───────────────────────────────
          curl -sSfL https://raw.githubusercontent.com/anchore/syft/v${SYFT_VERSION}/install.sh \
            | sh -s -- -b /usr/local/bin

          # ── Устанавливаем Grype (для сканирования SBOM) ───────────────────────────
          curl -sSfL https://raw.githubusercontent.com/anchore/grype/v${GRYPE_VERSION}/install.sh \
            | sh -s -- -b /usr/local/bin

          # ── Устанавливаем Trivy (для SBOM) ────────────────────────────────────────
          curl -sSfL https://raw.githubusercontent.com/aquasecurity/trivy/v${TRIVY_VERSION}/contrib/install.sh \
            | sh -s -- -b /usr/local/bin

          # ── Устанавливаем Cosign (для подписи артефактов) ─────────────────────────
          curl -sSfL https://github.com/sigstore/cosign/releases/download/v${COSIGN_VERSION}/cosign-linux-amd64 \
            -o /usr/local/bin/cosign
          chmod +x /usr/local/bin/cosign

          # ── Python-утилиты: reuse (лицензии), bandit (security), semgrep (OSS rules) ─
          pip install reuse bandit semgrep

      ###########################################################################
      # 3.2 Генерация SBOM и сканирование (Grype + Trivy)
      ###########################################################################
      - name: Generate SBOM (Syft)
        run: |
          syft . -o cyclonedx-json=sbom.json

      - name: Scan SBOM with Grype (fail on HIGH+CRITICAL)
        run: |
          grype sbom:sbom.json --fail-on high
        continue-on-error: true
        # ── Если найдены уязвимости с severity ≥ HIGH, шаг вернёт ненулевой код, но job продолжится.

      - name: Save Grype report (JSON)
        run: |
          grype sbom:sbom.json -o json > grype-report.json || true

      - name: Scan SBOM with Trivy (HIGH+CRITICAL)
        run: |
          # Обратите внимание: в более новых версиях Trivy синтаксис:
          # trivy sbom --format json --exit-code 1 --severity HIGH,CRITICAL sbom.json
          trivy sbom --format json --exit-code 1 --severity HIGH,CRITICAL sbom.json \
            | tee trivy-report.json || true

      ###########################################################################
      # 3.3 Лицензии (REUSE) и статический анализ
      ###########################################################################
      - name: REUSE lint (license compliance)
        run: |
          reuse lint || true

      - name: Bandit (security linter)
        run: |
          bandit -r src -f json -o bandit-report.json || true

      - name: Semgrep (OSS rules)
        run: |
          semgrep --config p/ci --sarif-output=semgrep-report.sarif || true

      ###########################################################################
      # 3.4 CodeQL analysis
      ###########################################################################
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: python

      - name: Autobuild CodeQL
        uses: github/codeql-action/autobuild@v3

      - name: Run CodeQL analysis
        uses: github/codeql-action/analyze@v3

      ###########################################################################
      # 3.5 Сборка Python-пакета и подпись через Cosign
      ###########################################################################
      - name: Build Python package (wheel & sdist)
        run: |
          python -m build --sdist --wheel --outdir dist

      - name: Sign artifacts with Cosign
        env:
          COSIGN_PASSWORD: ${{ secrets.COSIGN_KEY_SECRET }}
        run: |
          # Пример: подписание всех колёс и sdist
          for artifact in dist/*.whl dist/*.tar.gz; do
            cosign sign --key cosign.key "$artifact"
          done

      ###########################################################################
      # 3.6 Upload security‐artifacts и подписи
      ###########################################################################
      - name: Upload SBOM (CycloneDX JSON)
        uses: actions/upload-artifact@v4
        with:
          name: sbom-json
          path: sbom.json

      - name: Upload Grype report
        uses: actions/upload-artifact@v4
        with:
          name: grype-report
          path: grype-report.json

      - name: Upload Trivy report
        uses: actions/upload-artifact@v4
        with:
          name: trivy-report
          path: trivy-report.json

      - name: Upload REUSE report
        uses: actions/upload-artifact@v4
        with:
          name: reuse-report
          path: reuse-report.txt

      - name: Upload Bandit report
        uses: actions/upload-artifact@v4
        with:
          name: bandit-report
          path: bandit-report.json

      - name: Upload Semgrep SARIF
        uses: actions/upload-artifact@v4
        with:
          name: semgrep-report
          path: semgrep-report.sarif

      - name: Upload Python‐artifacts & signatures
        uses: actions/upload-artifact@v4
        with:
          name: signed-pypi-artifacts
          path: |
            dist/*.whl
            dist/*.tar.gz
            dist/*.whl.sig
            dist/*.tar.gz.sig
