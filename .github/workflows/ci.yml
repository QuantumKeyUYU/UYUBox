# .github/workflows/ci.yml

name: CI — lint/pytest/coverage/security & sign

# Даём Actions нужные права, в том числе для загрузки артефактов CodeQL.
permissions:
  actions: read
  contents: read
  security-events: write

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:

  # ────────────────────────────────────────────────────────────────────────────────────────────
  # 1) Линт, форматирование, isort
  # ────────────────────────────────────────────────────────────────────────────────────────────
  lint-format:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install linters
        run: |
          python -m pip install --upgrade pip
          pip install black ruff isort

      - name: Black (check-only)
        run: |
          black --check src tests

      - name: Ruff (check-only)
        run: |
          ruff check src tests

      - name: isort (check-only)
        run: |
          isort --check-only src tests

  # ────────────────────────────────────────────────────────────────────────────────────────────
  # 2) Тесты + покрытие (pytest → upload coverage)
  # ────────────────────────────────────────────────────────────────────────────────────────────
  pytest-coverage:
    needs: lint-format
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [ '3.10', '3.11', '3.12', '3.13' ]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          pip install .

      - name: Run pytest with coverage
        run: |
          pytest --maxfail=1 --disable-warnings --quiet

      - name: Upload coverage XML
        uses: actions/upload-artifact@v4
        with:
          name: coverage-xml-${{ matrix.python-version }}
          path: coverage.xml

      - name: Upload coverage HTML
        uses: actions/upload-artifact@v4
        with:
          name: htmlcov-${{ matrix.python-version }}
          path: htmlcov

  # ────────────────────────────────────────────────────────────────────────────────────────────
  # 3) Security checks + COSIGN подпись дистрибутивов
  # ────────────────────────────────────────────────────────────────────────────────────────────
  security-and-sign:
    needs: pytest-coverage
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.13 (для security-утилит & sign)
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      # ─── 3.1 Устанавливаем системные зависимости (Syft, Grype, Trivy) и Python-утилиты
      - name: Install system dependencies (Syft, Grype, Trivy) and Python tools
        run: |
          sudo apt-get update -y

          # Устанавливаем Syft (для генерации SBOM)
          curl -sfL https://raw.githubusercontent.com/anchore/syft/main/install.sh \
            | sh -s -- -b /usr/local/bin

          # Устанавливаем Grype (для сканирования SBOM)
          curl -sfL https://raw.githubusercontent.com/anchore/grype/main/install.sh \
            | sh -s -- -b /usr/local/bin

          # Устанавливаем Trivy (для дополнительного сканирования SBOM)
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh \
            | sh -s -- -b /usr/local/bin

          # Устанавливаем Python-утилиты: reuse (лицензии), bandit (security), semgrep (OSS rules)
          python -m pip install --upgrade pip
          pip install reuse bandit semgrep
          # КодQL сам подтянется после init CodeQL.

      # ─── 3.2 Генерация SBOM и скан на уязвимости Grype/Trivy
      - name: Generate SBOM (Syft)
        run: |
          syft . -o cyclonedx-json=sbom.json

      - name: Scan SBOM with Grype (fail on HIGH or CRITICAL)
        run: |
          grype sbom:sbom.json --fail-on high
        # Если найдутся уязвимости уровня HIGH/CRITICAL, этот шаг выйдет с кодом ≠0 и упадёт job.
        continue-on-error: false

      - name: Save Grype report (JSON)
        run: |
          grype sbom:sbom.json -o json > grype-report.json || true

      - name: Scan SBOM with Trivy (severity HIGH,CRITICAL)
        run: |
          trivy sbom:sbom.json --format json --output trivy-report.json --severity HIGH,CRITICAL
        # Если найдутся CRITICAL/HIGH, Trivy завершится с non-zero; пропустим (чтобы job не упал раньше времени),
        # но отчёт всё равно будет сохранён.
        continue-on-error: true

      # ─── 3.3 Проверка лицензий REUSE (reuse-lint)
      - name: REUSE lint (license compliance)
        run: |
          reuse lint || true
        # Job не упадёт, даже если найдёт несоответствия лицензий — отчёт сохранится.

      # ─── 3.4 Static analysis: Bandit, Semgrep
      - name: Bandit (security linter)
        run: |
          bandit -r src -f json -o bandit-report.json || true

      - name: Semgrep (OSS rules)
        run: |
          semgrep --config p/ci --sarif-output=semgrep-report.sarif || true

      # ─── 3.5 CodeQL analysis
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: python

      - name: Autobuild CodeQL
        uses: github/codeql-action/autobuild@v3

      - name: Run CodeQL analysis
        uses: github/codeql-action/analyze@v3

      # ─── 3.6 Запись Cosign key из Base64 и установка Cosign
      - name: Write Cosign private key from Base64
        if: ${{ secrets.COSIGN_KEY_B64 != '' }}
        run: |
          mkdir -p ~/.cosign
          echo "$COSIGN_KEY_B64" | base64 -d > ~/.cosign/cosign.key
          chmod 600 ~/.cosign/cosign.key

      - name: (Option) Write Cosign private key raw PEM
        if: ${{ secrets.COSIGN_KEY_PEM != '' }}
        run: |
          mkdir -p ~/.cosign
          printf '%s' "$COSIGN_KEY_PEM" > ~/.cosign/cosign.key
          chmod 600 ~/.cosign/cosign.key

      - name: Install Cosign
        run: |
          COSIGN_VERSION="v1.14.1"  # или актуальная версия
          curl -sfL https://raw.githubusercontent.com/sigstore/cosign/main/install.sh \
            | sh -s -- -b /usr/local/bin "${COSIGN_VERSION}"
          cosign version

      # ─── 3.7 Устанавливаем инструменты для сборки Python-пакета
      - name: Install build tool
        run: |
          python -m pip install --upgrade pip
          pip install build

      # ─── 3.8 Сборка Python-пакета (wheel + sdist)
      - name: Build Python package (wheel & sdist)
        run: |
          python -m build --sdist --wheel --outdir dist

      # ─── 3.9 Подписываем артефакты с помощью Cosign
      - name: Sign artifacts with Cosign
        env:
          COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}  # если пароль установлен
        run: |
          set -e
          # Проверим, что ключ читается (контрольные первые 2 строки PEM)
          head -n 2 ~/.cosign/cosign.key || true

          for artifact in dist/*.{whl,tar.gz}; do
            cosign sign --key ~/.cosign/cosign.key "$artifact"
          done

      # ─── 3.10 Загрузка артефактов (SBOM, отчёты и подписанные пакеты)
      - name: Upload SBOM (CycloneDX JSON)
        uses: actions/upload-artifact@v4
        with:
          name: sbom-json
          path: sbom.json

      - name: Upload Grype report
        uses: actions/upload-artifact@v4
        with:
          name: grype-report
          path: grype-report.json

      - name: Upload Trivy report
        uses: actions/upload-artifact@v4
        with:
          name: trivy-report
          path: trivy-report.json

      - name: Upload REUSE report
        uses: actions/upload-artifact@v4
        with:
          name: reuse-report
          path: .

      - name: Upload Bandit report
        uses: actions/upload-artifact@v4
        with:
          name: bandit-report
          path: bandit-report.json

      - name: Upload Semgrep SARIF
        uses: actions/upload-artifact@v4
        with:
          name: semgrep-report
          path: semgrep-report.sarif

      - name: Upload signed Python artifacts (wheel & tar.gz + signatures)
        uses: actions/upload-artifact@v4
        with:
          name: signed-python-packages
          path: |
            dist/*.whl
            dist/*.tar.gz
            dist/*.whl.sig
            dist/*.tar.gz.sig

      # ─── 3.11 Пост-шаги CodeQL
      - name: Post Run CodeQL analysis
        uses: github/codeql-action/post-analyze@v3

      - name: Post Initialize CodeQL
        uses: github/codeql-action/post-init@v3
