# .github/workflows/ci.yml

name: CI — lint/pytest/coverage/security/sign

# Даем нужные права GitHub Actions:
permissions:
  actions: read
  contents: read
  security-events: write

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  # Фиксированные версии инструментов (при необходимости поменяйте на актуальные)
  SYFT_VERSION: "0.83.0"
  GRYPE_VERSION: "0.88.0"
  TRIVY_VERSION: "0.49.0"
  COSIGN_VERSION: "2.1.0"
  # Секрет, в котором содержится приватный ключ Cosign (PEM-блок)
  COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}

jobs:
  # ────────────────────────────────────────────────────────────────────────────────────────────
  # 1) Линтинг, форматирование, isort
  # ────────────────────────────────────────────────────────────────────────────────────────────
  lint-format:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.12 (для линтеров)
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install linters
        run: |
          python -m pip install --upgrade pip
          pip install black ruff isort

      - name: Black (check-only)
        run: |
          black --check src tests

      - name: Ruff (check-only)
        run: |
          ruff check src tests

      - name: isort (check-only)
        run: |
          isort --check-only src tests

  # ────────────────────────────────────────────────────────────────────────────────────────────
  # 2) Тесты + покрытие (pytest → upload coverage)
  # ────────────────────────────────────────────────────────────────────────────────────────────
  pytest-coverage:
    needs: lint-format
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [ '3.10', '3.11', '3.12', '3.13' ]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          pip install .

      - name: Run pytest with coverage
        run: |
          pytest

      - name: Upload coverage XML
        uses: actions/upload-artifact@v4
        with:
          name: coverage-xml-${{ matrix.python-version }}
          path: coverage.xml

      - name: Upload coverage HTML
        uses: actions/upload-artifact@v4
        with:
          name: htmlcov-${{ matrix.python-version }}
          path: htmlcov

  # ────────────────────────────────────────────────────────────────────────────────────────────
  # 3) Security-checks + Build & Sign
  # ────────────────────────────────────────────────────────────────────────────────────────────
  security-and-sign:
    needs: pytest-coverage
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      ######################################################################
      # 3.1 Системные зависимости (Syft, Grype, Trivy) и Python-утилиты
      ######################################################################
      - name: Install system dependencies (Syft, Grype, Trivy)
        run: |
          set -e

          # Устанавливаем Syft (для генерации SBOM)
          curl -sSfL "https://raw.githubusercontent.com/anchore/syft/main/install.sh" | sh -s -- -b /usr/local/bin

          # Устанавливаем Grype (для сканирования SBOM)
          curl -sSfL "https://raw.githubusercontent.com/anchore/grype/main/install.sh" | sh -s -- -b /usr/local/bin

          # Устанавливаем Trivy (для дополнительного сканирования)
          curl -sSfL "https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh" | sh -s -- -b /usr/local/bin

          # Устанавливаем Python-утилиты: reuse (лицензии), bandit (security linter), semgrep (OSS rules)
          python -m pip install --upgrade pip
          pip install reuse bandit semgrep

      ######################################################################
      # 3.2 Генерация SBOM и сканирование на уязвимости
      ######################################################################
      - name: Generate SBOM (Syft)
        run: |
          syft . -o cyclonedx-json=sbom.json

      - name: Scan SBOM with Grype (fail on HIGH or CRITICAL)
        run: |
          grype sbom:sbom.json --fail-on high

      - name: Save Grype report (JSON)
        run: |
          grype sbom:sbom.json -o json > grype-report.json || true

      - name: Scan SBOM with Trivy (severity HIGH,CRITICAL)
        run: |
          trivy sbom sbom.json --format json --output trivy-report.json --severity HIGH,CRITICAL || true

      ######################################################################
      # 3.3 Проверка лицензий (REUSE)
      ######################################################################
      - name: REUSE lint (license compliance)
        run: |
          reuse lint > reuse-report.txt || true

      ######################################################################
      # 3.4 Static analysis: Bandit, Semgrep
      ######################################################################
      - name: Bandit (security linter)
        run: |
          bandit -r src -f json -o bandit-report.json || true

      - name: Semgrep (OSS rules)
        run: |
          semgrep --config p/ci --sarif-output=semgrep-report.sarif || true

      ######################################################################
      # 3.5 CodeQL analysis
      ######################################################################
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: python

      - name: Autobuild CodeQL
        uses: github/codeql-action/autobuild@v3

      - name: Run CodeQL analysis
        uses: github/codeql-action/analyze@v3

      ######################################################################
      # 3.6 Сборка Python-пакета и подпись через Cosign
      ######################################################################

      # 3.6.1: Записываем приватный ключ Cosign в файл (из GitHub Secrets)
      - name: Write Cosign private key to file
        run: |
          mkdir -p ~/.cosign
          echo "${{ env.COSIGN_PRIVATE_KEY }}" > ~/.cosign/cosign.key
          chmod 600 ~/.cosign/cosign.key

      # 3.6.2: Устанавливаем Cosign
      - name: Install Cosign
        run: |
          curl -sSfL "https://github.com/sigstore/cosign/releases/download/v${COSIGN_VERSION}/cosign-linux-amd64" \
            -o /usr/local/bin/cosign
          chmod +x /usr/local/bin/cosign

      # 3.6.3: Устанавливаем пакет build для сборки wheel & sdist
      - name: Install build tool
        run: |
          python -m pip install --upgrade pip
          pip install build

      # 3.6.4: Сборка Python-пакета (wheel & sdist)
      - name: Build Python package (wheel & sdist)
        run: |
          python -m build --sdist --wheel --outdir dist

      # 3.6.5: Подпись всех артефактов (dist/*.whl, dist/*.tar.gz) с помощью Cosign
      - name: Sign artifacts with Cosign
        run: |
          for artifact in dist/*.whl dist/*.tar.gz; do
            cosign sign --key ~/.cosign/cosign.key "$artifact"
          done

      ######################################################################
      # 3.7 Загрузка артефактов
      ######################################################################
      - name: Upload SBOM (CycloneDX JSON)
        uses: actions/upload-artifact@v4
        with:
          name: sbom-json
          path: sbom.json

      - name: Upload Grype report
        uses: actions/upload-artifact@v4
        with:
          name: grype-report
          path: grype-report.json

      - name: Upload Trivy report
        uses: actions/upload-artifact@v4
        with:
          name: trivy-report
          path: trivy-report.json

      - name: Upload REUSE report
        uses: actions/upload-artifact@v4
        with:
          name: reuse-report
          path: reuse-report.txt

      - name: Upload Bandit report
        uses: actions/upload-artifact@v4
        with:
          name: bandit-report
          path: bandit-report.json

      - name: Upload Semgrep SARIF
        uses: actions/upload-artifact@v4
        with:
          name: semgrep-report
          path: semgrep-report.sarif

      - name: Upload signed Python artifacts
        uses: actions/upload-artifact@v4
        with:
          name: signed-pypi-artifacts
          path: |
            dist/*.whl
            dist/*.tar.gz
            dist/*.whl.sig
            dist/*.tar.gz.sig
