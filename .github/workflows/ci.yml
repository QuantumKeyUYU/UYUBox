# .github/workflows/ci.yml

name: CI — lint/pytest/coverage/security & sign

# Разрешения для Actions (в т.ч. для CodeQL, загрузки артефактов и т.д.)
permissions:
  actions: read
  contents: read
  security-events: write

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:

  # ────────────────────────────────────────────────────────────────────────────────────────────
  # 1) Линт, форматирование, isort
  # ────────────────────────────────────────────────────────────────────────────────────────────
  lint-format:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install linters
        run: |
          python -m pip install --upgrade pip
          pip install black ruff isort

      - name: Black (check-only)
        run: |
          black --check src tests

      - name: Ruff (check-only)
        run: |
          ruff check src tests

      - name: isort (check-only)
        run: |
          isort --check-only src tests

  # ────────────────────────────────────────────────────────────────────────────────────────────
  # 2) Тесты + покрытие (pytest → upload coverage)
  # ────────────────────────────────────────────────────────────────────────────────────────────
  pytest-coverage:
    needs: lint-format
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [ '3.10', '3.11', '3.12', '3.13' ]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          pip install .

      - name: Run pytest with coverage
        run: |
          pytest --maxfail=1 --disable-warnings --quiet

      - name: Upload coverage XML
        uses: actions/upload-artifact@v4
        with:
          name: coverage-xml-${{ matrix.python-version }}
          path: coverage.xml

      - name: Upload coverage HTML
        uses: actions/upload-artifact@v4
        with:
          name: htmlcov-${{ matrix.python-version }}
          path: htmlcov

  # ────────────────────────────────────────────────────────────────────────────────────────────
  # 3) Security checks + COSIGN подпись дистрибутивов
  # ────────────────────────────────────────────────────────────────────────────────────────────
  security-and-sign:
    needs: pytest-coverage
    runs-on: ubuntu-latest
    steps:

      # ─── 3.1 Checkout + Python 3.13 для security-утилит
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.13
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      # ─── 3.2 Устанавливаем системные зависимости (Syft, Grype, Trivy) + Python-утилиты
      - name: Install system dependencies (Syft, Grype, Trivy) and Python tools
        run: |
          sudo apt-get update -y

          # Syft (генерация SBOM)
          curl -sfL https://raw.githubusercontent.com/anchore/syft/main/install.sh \
            | sh -s -- -b /usr/local/bin

          # Grype (сканирование SBOM)
          curl -sfL https://raw.githubusercontent.com/anchore/grype/main/install.sh \
            | sh -s -- -b /usr/local/bin

          # Trivy (дополнительный скан SBOM)
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh \
            | sh -s -- -b /usr/local/bin

          # Python-утилиты: reuse (лицензии), bandit (security), semgrep (OSS rules)
          python -m pip install --upgrade pip
          pip install reuse bandit semgrep

      # ─── 3.3 Генерация SBOM и скан на уязвимости
      - name: Generate SBOM (Syft)
        run: |
          syft . -o cyclonedx-json=sbom.json

      - name: Scan SBOM with Grype (fail on HIGH or CRITICAL)
        run: |
          grype sbom:sbom.json --fail-on high
        # Если найдутся уязвимости уровня HIGH/CRITICAL, шаг упадёт и прекратит выполнение job.
        continue-on-error: false

      - name: Save Grype report (JSON)
        run: |
          grype sbom:sbom.json -o json > grype-report.json || true

      - name: Scan SBOM with Trivy (severity HIGH,CRITICAL)
        run: |
          trivy sbom:sbom.json --format json --output trivy-report.json --severity HIGH,CRITICAL
        # Trivy упадёт на CRITICAL/HIGH, но отчёт всё равно запишется
        continue-on-error: true

      # ─── 3.4 Проверка лицензий REUSE (reuse-lint)
      - name: REUSE lint (license compliance)
        run: |
          reuse lint || true
        # Job не упадёт, даже если найдутся несоответствия лицензий

      # ─── 3.5 Static analysis: Bandit и Semgrep
      - name: Bandit (security linter)
        run: |
          bandit -r src -f json -o bandit-report.json || true

      - name: Semgrep (OSS rules)
        run: |
          semgrep --config p/ci --sarif-output=semgrep-report.sarif || true

      # ─── 3.6 CodeQL analysis
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: python

      - name: Autobuild CodeQL
        uses: github/codeql-action/autobuild@v3

      - name: Run CodeQL analysis
        uses: github/codeql-action/analyze@v3

      # ─── 3.7 Запись Cosign-ключа из Base64 (без проверки if, просто берем секрет)
      - name: Write Cosign private key from Base64
        env:
          COSIGN_KEY_B64: ${{ secrets.COSIGN_KEY_B64 }}
        run: |
          mkdir -p ~/.cosign
          echo "$COSIGN_KEY_B64" | base64 -d > ~/.cosign/cosign.key
          chmod 600 ~/.cosign/cosign.key

      # ─── 3.8 Установка Cosign (берём конкретную версию или последнюю)
      - name: Install Cosign
        run: |
          COSIGN_VERSION="v1.14.1"
          curl -sfL https://raw.githubusercontent.com/sigstore/cosign/main/install.sh \
            | sh -s -- -b /usr/local/bin "${COSIGN_VERSION}"
          cosign version

      # ─── 3.9 Устанавливаем инструмент для сборки Python-пакета
      - name: Install build tool
        run: |
          python -m pip install --upgrade pip
          pip install build

      # ─── 3.10 Сборка Python-пакета (wheel + sdist)
      - name: Build Python package (wheel & sdist)
        run: |
          python -m build --sdist --wheel --outdir dist

      # ─── 3.11 Подписываем артефакты с помощью Cosign
      - name: Sign artifacts with Cosign
        env:
          COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}  # можно не задавать, если ключ не запаролен
        run: |
          set -e
          # Покажем первые строки PEM, чтобы убедиться, что ключ записался
          head -n 2 ~/.cosign/cosign.key || true

          for artifact in dist/*.{whl,tar.gz}; do
            cosign sign --key ~/.cosign/cosign.key "$artifact"
          done

      # ─── 3.12 Загрузка артефактов (SBOM, отчёты, подписанные пакеты)
      - name: Upload SBOM (CycloneDX JSON)
        uses: actions/upload-artifact@v4
        with:
          name: sbom-json
          path: sbom.json

      - name: Upload Grype report
        uses: actions/upload-artifact@v4
        with:
          name: grype-report
          path: grype-report.json

      - name: Upload Trivy report
        uses: actions/upload-artifact@v4
        with:
          name: trivy-report
          path: trivy-report.json

      - name: Upload REUSE report
        uses: actions/upload-artifact@v4
        with:
          name: reuse-report
          path: .

      - name: Upload Bandit report
        uses: actions/upload-artifact@v4
        with:
          name: bandit-report
          path: bandit-report.json

      - name: Upload Semgrep SARIF
        uses: actions/upload-artifact@v4
        with:
          name: semgrep-report
          path: semgrep-report.sarif

      - name: Upload signed Python artifacts (wheel & tar.gz + signatures)
        uses: actions/upload-artifact@v4
        with:
          name: signed-python-packages
          path: |
            dist/*.whl
            dist/*.tar.gz
            dist/*.whl.sig
            dist/*.tar.gz.sig

      # ─── 3.13 Пост-шаги CodeQL
      - name: Post Run CodeQL analysis
        uses: github/codeql-action/post-analyze@v3

      - name: Post Initialize CodeQL
        uses: github/codeql-action/post-init@v3
