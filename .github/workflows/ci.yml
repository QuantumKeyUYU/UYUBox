# .github/workflows/ci.yml

name: CI — lint/pytest/coverage/security-and-sign

# Даем Actions минимальные привилегии (чтение кода + запись security-events для CodeQL)
permissions:
  actions: read
  contents: read
  security-events: write

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  # ────────────────────────────────────────────────────────────────────────────────────────────
  # 1) Линт, форматирование, isort
  # ────────────────────────────────────────────────────────────────────────────────────────────
  lint-format:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.12 (for linters)
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install linters
        run: |
          python -m pip install --upgrade pip
          pip install black ruff isort

      - name: Black (check-only)
        run: |
          black --check src tests

      - name: Ruff (check-only)
        run: |
          ruff check src tests

      - name: isort (check-only)
        run: |
          isort --check-only src tests

  # ────────────────────────────────────────────────────────────────────────────────────────────
  # 2) Тесты + покрытие (pytest → upload coverage)
  # ────────────────────────────────────────────────────────────────────────────────────────────
  pytest-coverage:
    needs: lint-format
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [ "3.10", "3.11", "3.12", "3.13" ]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          pip install .

      - name: Run pytest with coverage
        run: |
          pytest --maxfail=1 --disable-warnings -q

      - name: Upload coverage XML
        uses: actions/upload-artifact@v4
        with:
          name: coverage-xml-${{ matrix.python-version }}
          path: coverage.xml

      - name: Upload coverage HTML
        uses: actions/upload-artifact@v4
        with:
          name: htmlcov-${{ matrix.python-version }}
          path: htmlcov

  # ────────────────────────────────────────────────────────────────────────────────────────────
  # 3) Security + Cosign-sign
  # ────────────────────────────────────────────────────────────────────────────────────────────
  security-and-sign:
    needs: pytest-coverage
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.13 (for security tools, building & signing)
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      # ────────────────────────────────────────────────────────────────────────────────────────────
      # 3.1 Устанавливаем системные зависимости: Syft, Grype, Trivy
      # ────────────────────────────────────────────────────────────────────────────────────────────
      - name: Install system dependencies (Syft, Grype, Trivy)
        run: |
          set -e
          # Обновляем индекс пакетов
          sudo apt-get update

          # Устанавливаем curl, unzip, git, ca-certificates (если их нет)
          sudo apt-get install -y curl unzip git ca-certificates

          # Syft (генерация SBOM)
          curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin

          # Grype (сканирование SBOM)
          curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin

          # Trivy (дополнительный SBOM-сканер)
          curl -sSfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin

          # Установим python-утилиты: reuse (лицензии), bandit (security), semgrep (OSS правила)
          python -m pip install --upgrade pip
          pip install reuse bandit semgrep

      # ────────────────────────────────────────────────────────────────────────────────────────────
      # 3.2 Генерация SBOM и скан на уязвимости
      # ────────────────────────────────────────────────────────────────────────────────────────────
      - name: Generate SBOM (Syft)
        run: |
          syft . -o cyclonedx-json=sbom.json

      - name: Scan SBOM with Grype (fail on HIGH or CRITICAL)
        run: |
          grype sbom:sbom.json --fail-on high || true
        # если найдены уязвимости HIGH/CRITICAL — Grype вернёт exit code 1, но мы не хотим падать полностью,
        # поэтому добавляем "|| true". Если же хочется прерывать сборку, уберите “|| true”.

      - name: Save Grype report (JSON)
        run: |
          grype sbom:sbom.json -o json > grype-report.json || true

      - name: Scan SBOM with Trivy (severity HIGH,CRITICAL)
        run: |
          trivy sbom --input sbom.json --severity HIGH,CRITICAL --format json --output trivy-report.json || true

      # ────────────────────────────────────────────────────────────────────────────────────────────
      # 3.3 Проверка лицензий REUSE
      # ────────────────────────────────────────────────────────────────────────────────────────────
      - name: REUSE lint (license compliance)
        run: |
          reuse lint || true

      # ────────────────────────────────────────────────────────────────────────────────────────────
      # 3.4 Статический анализ: Bandit + Semgrep
      # ────────────────────────────────────────────────────────────────────────────────────────────
      - name: Bandit (security linter)
        run: |
          bandit -r src -f json -o bandit-report.json || true

      - name: Semgrep (OSS rules → SARIF)
        run: |
          semgrep --config p/ci --sarif-output semgrep-report.sarif || true

      # ────────────────────────────────────────────────────────────────────────────────────────────
      # 3.5 CodeQL анализ
      # ────────────────────────────────────────────────────────────────────────────────────────────
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: python

      - name: Autobuild CodeQL
        uses: github/codeql-action/autobuild@v3

      - name: Run CodeQL analysis
        uses: github/codeql-action/analyze@v3

      # ────────────────────────────────────────────────────────────────────────────────────────────
      # 3.6 Записываем Cosign-ключ из GitHub Secrets
      #
      #   Вариант A: секрет COSIGN_KEY_B64 содержит Base64-строку (рекомендуемый).
      #   Вариант B: секрет COSIGN_KEY_PEM содержит "сырой" PEM (многострочный).
      # ────────────────────────────────────────────────────────────────────────────────────────────
      - name: Write Cosign key (Base64)
        if: ${{ secrets.COSIGN_KEY_B64 != '' }}
        run: |
          mkdir -p ~/.cosign
          echo "$COSIGN_KEY_B64" | base64 -d > ~/.cosign/cosign.key
          chmod 600 ~/.cosign/cosign.key

      - name: Write Cosign key (raw PEM)
        if: ${{ secrets.COSIGN_KEY_PEM != '' }}
        run: |
          mkdir -p ~/.cosign
          printf '%s' "$COSIGN_KEY_PEM" > ~/.cosign/cosign.key
          chmod 600 ~/.cosign/cosign.key

      # ────────────────────────────────────────────────────────────────────────────────────────────
      # 3.7 Устанавливаем Cosign binary из официального скрипта
      # ────────────────────────────────────────────────────────────────────────────────────────────
      - name: Install Cosign
        run: |
          COSIGN_VERSION="v1.14.1"
          curl -sSfL "https://raw.githubusercontent.com/sigstore/cosign/main/install.sh" | sh -s -- -b /usr/local/bin "${COSIGN_VERSION}"
          cosign version

      # ────────────────────────────────────────────────────────────────────────────────────────────
      # 3.8 Устанавливаем инструмент для сборки Python-пакета
      # ────────────────────────────────────────────────────────────────────────────────────────────
      - name: Install build tool
        run: |
          python -m pip install --upgrade pip
          pip install build

      # ────────────────────────────────────────────────────────────────────────────────────────────
      # 3.9 Сборка Python-пакета (wheel & sdist)
      # ────────────────────────────────────────────────────────────────────────────────────────────
      - name: Build Python package (wheel & sdist)
        run: |
          python -m build --sdist --wheel --outdir dist

      # ────────────────────────────────────────────────────────────────────────────────────────────
      # 3.10 Подписываем артефакты Cosign'ом
      # ────────────────────────────────────────────────────────────────────────────────────────────
      - name: Sign artifacts with Cosign
        # Если приватный ключ защищён паролем, передаём его в переменной COSIGN_PASSWORD
        env:
          COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}
        run: |
          set -e
          # Проверка, что ключ правильно записался и имеет заголовки PEM
          head -n 2 ~/.cosign/cosign.key

          for artifact in dist/*.{whl,tar.gz}; do
            cosign sign --key ~/.cosign/cosign.key "$artifact"
          done

      # ────────────────────────────────────────────────────────────────────────────────────────────
      # 3.11 Загрузка артефактов: SBOM, отчёты, подписи, сами пакеты
      # ────────────────────────────────────────────────────────────────────────────────────────────
      - name: Upload SBOM (CycloneDX JSON)
        uses: actions/upload-artifact@v4
        with:
          name: sbom-json
          path: sbom.json

      - name: Upload Grype report
        uses: actions/upload-artifact@v4
        with:
          name: grype-report
          path: grype-report.json

      - name: Upload Trivy report
        uses: actions/upload-artifact@v4
        with:
          name: trivy-report
          path: trivy-report.json

      - name: Upload REUSE report
        uses: actions/upload-artifact@v4
        with:
          name: reuse-report
          path: .

      - name: Upload Bandit report
        uses: actions/upload-artifact@v4
        with:
          name: bandit-report
          path: bandit-report.json

      - name: Upload Semgrep SARIF
        uses: actions/upload-artifact@v4
        with:
          name: semgrep-report
          path: semgrep-report.sarif

      - name: Upload signed Python artifacts (wheels, sdist + подписи)
        uses: actions/upload-artifact@v4
        with:
          name: signed-python-artifacts
          path: |
            dist/*.whl
            dist/*.tar.gz
            dist/*.whl.sig
            dist/*.tar.gz.sig

      # ────────────────────────────────────────────────────────────────────────────────────────────
      # 3.12 Post-run CodeQL
      # ────────────────────────────────────────────────────────────────────────────────────────────
      - name: Post Run CodeQL analysis
        uses: github/codeql-action/analyze@v3

      - name: Post Initialize CodeQL
        uses: github/codeql-action/init@v3

      - name: Post Checkout repository
        uses: actions/checkout@v4
