# .github/workflows/ci.yml

name: CI — lint/pytest/coverage/security/sign

# Даем Actions минимально необходимые права
permissions:
  actions: read
  contents: read
  security-events: write

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# Зафиксированные версии инструментов, чтобы не ловить 404:
env:
  SYFT_VERSION: "0.83.0"
  GRYPE_VERSION: "0.88.0"
  TRIVY_VERSION: "0.49.0"
  COSIGN_VERSION: "2.1.0"
  # Секрет, в котором хранится пароль (или токен) для Cosign.
  # Создайте этот секрет в Settings → Secrets → New repository secret → Name: COSIGN_PASSWORD, Value: <ваш пароль>
  COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}

jobs:
  # ────────────────────────────────────────────────────────────────────────────
  # 1) Линт, форматирование, isort
  # ────────────────────────────────────────────────────────────────────────────
  lint-format:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.12 (для линтеров)
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install linters
        run: |
          pip install black ruff isort

      - name: Black (check-only)
        run: |
          black --check src tests

      - name: Ruff (check-only)
        run: |
          ruff check src tests

      - name: isort (check-only)
        run: |
          isort --check-only src tests

  # ────────────────────────────────────────────────────────────────────────────
  # 2) Тесты + покрытие (pytest → upload coverage)
  # ────────────────────────────────────────────────────────────────────────────
  pytest-coverage:
    needs: lint-format
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [ '3.10', '3.11', '3.12', '3.13' ]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          pip install -r requirements-dev.txt
          pip install .

      - name: Run pytest with coverage
        run: |
          pytest

      - name: Upload coverage XML
        uses: actions/upload-artifact@v4
        with:
          name: coverage-xml-${{ matrix.python-version }}
          path: coverage.xml

      - name: Upload coverage HTML
        uses: actions/upload-artifact@v4
        with:
          name: htmlcov-${{ matrix.python-version }}
          path: htmlcov

  # ────────────────────────────────────────────────────────────────────────────
  # 3) Security checks + сборка+подпись пакета
  # ────────────────────────────────────────────────────────────────────────────
  security-and-sign:
    needs: pytest-coverage
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      ###########################################################################
      # 3.1 (опционально) — Fetch secrets из Vault (если понадобится)
      ###########################################################################
      - name: Fetch secrets from Vault (пример)
        if: ${{ false }}  # <-- Поставьте true, когда подключите реальный Vault/SecretsManager
        run: |
          # Пример для HashiCorp Vault (замените под свои нужды):
          vault login "$VAULT_TOKEN"
          vault kv get -field=cosign_key secret/data/mypath/cosign > cosign.key

      ###########################################################################
      # 3.2 Установить Syft, Grype, Trivy, Cosign и Python‐утилиты
      ###########################################################################
      - name: Install system dependencies (Syft, Grype, Trivy, Cosign) and Python tools
        run: |
          set -exo pipefail

          # ── Syft (генерация SBOM) ──────────────────────────────────────────────
          curl -sSfL "https://raw.githubusercontent.com/anchore/syft/v${SYFT_VERSION}/install.sh" \
            | sh -s -- -b /usr/local/bin

          # ── Grype (сканирование SBOM) ────────────────────────────────────────
          curl -sSfL "https://raw.githubusercontent.com/anchore/grype/v${GRYPE_VERSION}/install.sh" \
            | sh -s -- -b /usr/local/bin

          # ── Trivy (дополнительный скан SBOM) ─────────────────────────────────
          curl -sSfL "https://raw.githubusercontent.com/aquasecurity/trivy/v${TRIVY_VERSION}/contrib/install.sh" \
            | sh -s -- -b /usr/local/bin

          # ── Cosign (подпись артефактов) ───────────────────────────────────────
          curl -sSfL "https://github.com/sigstore/cosign/releases/download/v${COSIGN_VERSION}/cosign-linux-amd64" \
            -o /usr/local/bin/cosign
          chmod +x /usr/local/bin/cosign

          # ── Python-утилиты: reuse (лицензии), bandit (security), semgrep (OSS rules), build ────
          pip install reuse bandit semgrep build

      ###########################################################################
      # 3.3 SBOM → Grype/Trivy
      ###########################################################################
      - name: Generate SBOM (Syft)
        run: |
          syft . -o cyclonedx-json=sbom.json

      - name: Scan SBOM with Grype (fail on HIGH/CRITICAL)
        run: |
          grype sbom:sbom.json --fail-on high
        continue-on-error: true
        # ── Если найдены HIGH/CRITICAL, Grype вернёт код ≠0, но job продолжится

      - name: Save Grype report (JSON)
        run: |
          grype sbom:sbom.json -o json > grype-report.json || true

      - name: Scan SBOM with Trivy (HIGH/CRITICAL)
        run: |
          trivy sbom --format json --exit-code 1 --severity HIGH,CRITICAL sbom.json \
            | tee trivy-report.json || true

      ###########################################################################
      # 3.4 Лицензии + статический анализ
      ###########################################################################
      - name: REUSE lint (license compliance)
        run: |
          reuse lint || true

      - name: Bandit (security linter)
        run: |
          bandit -r src -f json -o bandit-report.json || true

      - name: Semgrep (OSS rules)
        run: |
          semgrep --config p/ci --sarif-output=semgrep-report.sarif || true

      ###########################################################################
      # 3.5 CodeQL analysis
      ###########################################################################
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: python

      - name: Autobuild CodeQL
        uses: github/codeql-action/autobuild@v3

      - name: Run CodeQL analysis
        uses: github/codeql-action/analyze@v3

      ###########################################################################
      # 3.6 Сборка Python-пакета и подпись через Cosign
      ###########################################################################
      - name: Build Python package (wheel & sdist)
        run: |
          python -m build --sdist --wheel --outdir dist

      - name: Sign artifacts with Cosign
        env:
          # COSIGN_PASSWORD подтягивается из секрета GitHub Actions → Settings → Secrets → COSIGN_PASSWORD
          COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}
        run: |
          for artifact in dist/*.whl dist/*.tar.gz; do
            cosign sign --key cosign.key "$artifact"
          done

      ###########################################################################
      # 3.7 Загрузка артефактов (SBOM, отчёты, подписи)
      ###########################################################################
      - name: Upload SBOM (CycloneDX JSON)
        uses: actions/upload-artifact@v4
        with:
          name: sbom-json
          path: sbom.json

      - name: Upload Grype report
        uses: actions/upload-artifact@v4
        with:
          name: grype-report
          path: grype-report.json

      - name: Upload Trivy report
        uses: actions/upload-artifact@v4
        with:
          name: trivy-report
          path: trivy-report.json

      - name: Upload REUSE report
        uses: actions/upload-artifact@v4
        with:
          name: reuse-report
          path: reuse-report.txt

      - name: Upload Bandit report
        uses: actions/upload-artifact@v4
        with:
          name: bandit-report
          path: bandit-report.json

      - name: Upload Semgrep SARIF
        uses: actions/upload-artifact@v4
        with:
          name: semgrep-report
          path: semgrep-report.sarif

      - name: Upload signed Python-artifacts
        uses: actions/upload-artifact@v4
        with:
          name: signed-pypi-artifacts
          path: |
            dist/*.whl
            dist/*.tar.gz
            dist/*.whl.sig
            dist/*.tar.gz.sig
