# .github/workflows/ci.yml
name: CI — lint / pytest / coverage / security & sign

permissions:
  contents: read
  actions: read
  security-events: write

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

#######################################################################
# 1 — Lint / formatting
#######################################################################
jobs:
  lint-format:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements-dev.txt') }}
          restore-keys: ${{ runner.os }}-pip-

      - name: Install linters
        run: |
          python -m pip install --upgrade pip
          pip install black ruff isort

      - name: Black (check‑only)
        run: black --check src tests

      - name: Ruff (check‑only)
        run: ruff check src tests

      - name: isort (check‑only)
        run: isort --check-only src tests

#######################################################################
# 2 — Tests + coverage (matrix 3.10‑3.13)
#######################################################################
  pytest-coverage:
    needs: lint-format
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python: ["3.10", "3.11", "3.12", "3.13"]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}

      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python }}-${{ hashFiles('**/requirements-dev.txt') }}
          restore-keys: ${{ runner.os }}-pip-

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          pip install .

      - name: Run pytest
        run: pytest -q --maxfail=1

      - uses: actions/upload-artifact@v4
        with:
          name: cov-xml-${{ matrix.python }}
          path: coverage.xml

      - uses: actions/upload-artifact@v4
        with:
          name: htmlcov-${{ matrix.python }}
          path: htmlcov

#######################################################################
# 3 — Security + package signing
#######################################################################
  security-and-sign:
    needs: pytest-coverage
    runs-on: ubuntu-latest
    env:
      COSIGN_KEY_B64: ${{ secrets.COSIGN_KEY_B64 }}
      COSIGN_PWD:     ${{ secrets.COSIGN_PASSWORD }}
    steps:
      #################################################################
      # 3.1  Base system + Python
      #################################################################
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Install Syft / Grype / Trivy + helpers
        run: |
          sudo apt-get update -y
          curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh \
            | sudo sh -s -- -b /usr/local/bin
          curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh \
            | sudo sh -s -- -b /usr/local/bin
          curl -sSfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh \
            | sudo sh -s -- -b /usr/local/bin
          python -m pip install --upgrade pip
          pip install reuse bandit semgrep build

      #################################################################
      # 3.2  SBOM / vuln scan
      #################################################################
      - name: Generate SBOM
        run: syft . -o cyclonedx-json=sbom.json

      - name: Grype scan (fail on CRITICAL only)
        run: grype sbom:sbom.json --fail-on critical

      - name: Save Grype report
        if: always()
        run: grype sbom:sbom.json -o json > grype-report.json || true

      - name: Trivy scan
        run: trivy sbom:sbom.json --severity HIGH,CRITICAL --format json --output trivy-report.json
        continue-on-error: true

      #################################################################
      # 3.3  Static analysis
      #################################################################
      - name: REUSE lint
        run: reuse lint || true

      - name: Bandit
        run: bandit -r src -f json -o bandit-report.json || true

      - name: Semgrep (OSS rules)
        run: semgrep --config p/ci --sarif-output=semgrep.sarif || true

      #################################################################
      # 3.4  CodeQL
      #################################################################
      - uses: github/codeql-action/init@v3
        with:
          languages: python
      - uses: github/codeql-action/autobuild@v3
      - uses: github/codeql-action/analyze@v3

      #################################################################
      # 3.5  Prepare Cosign key (if secret present)
      #################################################################
      - name: Decode Cosign key (Base64)
        if: env.COSIGN_KEY_B64 != ''
        run: |
          mkdir -p ~/.cosign
          echo "$COSIGN_KEY_B64" | base64 -d > ~/.cosign/cosign.key
          chmod 600 ~/.cosign/cosign.key

      #################################################################
      # 3.6  Install Cosign
      #################################################################
      - name: Install Cosign
        if: env.COSIGN_KEY_B64 != ''
        run: |
          COSIGN_VERSION="v2.2.4"
          curl -LO https://github.com/sigstore/cosign/releases/download/${COSIGN_VERSION}/cosign-linux-amd64
          sudo install cosign-linux-amd64 /usr/local/bin/cosign
          cosign version

      #################################################################
      # 3.7  Build wheel + sdist
      #################################################################
      - name: Build package
        run: python -m build --sdist --wheel --outdir dist

      #################################################################
      # 3.8  Sign artifacts (if key present)
      #################################################################
      - name: Sign artifacts
        if: env.COSIGN_KEY_B64 != ''
        env:
          COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}
        run: |
          for file in dist/*.{whl,tar.gz}; do
            cosign sign --key ~/.cosign/cosign.key "$file"
          done

      #################################################################
      # 3.9  Upload artifacts / reports
      #################################################################
      - uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: sbom.json

      - uses: actions/upload-artifact@v4
        with:
          name: grype-report
          path: grype-report.json

      - uses: actions/upload-artifact@v4
        with:
          name: trivy-report
          path: trivy-report.json

      - uses: actions/upload-artifact@v4
        with:
          name: bandit-report
          path: bandit-report.json

      - uses: actions/upload-artifact@v4
        with:
          name: semgrep-report
          path: semgrep.sarif

      - uses: actions/upload-artifact@v4
        with:
          name: signed-packages
          path: |
            dist/*.whl
            dist/*.tar.gz
            dist/*.sig
