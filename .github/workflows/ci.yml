# .github/workflows/ci.yml
name: CI — lint / pytest / coverage / security & sign

# Права для GitHub Actions (чтобы CodeQL мог отправлять результаты, а мы могли выгружать артефакты)
permissions:
  contents:        read
  actions:         read
  security-events: write

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  ###############################################################################
  # 1 — Lint / formatting (Black, Ruff, isort)
  ###############################################################################
  lint-format:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Cache pip (для установки линтеров)
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-lint-${{ hashFiles('**/requirements-dev.txt') }}
          restore-keys: ${{ runner.os }}-pip-

      - name: Install linters
        run: |
          python -m pip install --upgrade pip
          pip install black ruff isort

      - name: Black (check only)
        run: black --check src tests

      - name: Ruff (check only)
        run: ruff check src tests

      - name: isort (check only)
        run: isort --check-only src tests

  ###############################################################################
  # 2 — Tests + coverage (matrix 3.10–3.13)
  ###############################################################################
  pytest-coverage:
    needs: lint-format
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12", "3.13"]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip (для установок зависимостей)
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements-dev.txt') }}
          restore-keys: ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          pip install .

      - name: Run pytest
        run: pytest -q

      - name: Upload coverage XML
        uses: actions/upload-artifact@v4
        with:
          name: cov-xml-${{ matrix.python-version }}
          path: coverage.xml

      - name: Upload coverage HTML
        uses: actions/upload-artifact@v4
        with:
          name: htmlcov-${{ matrix.python-version }}
          path: htmlcov

  ###############################################################################
  # 3 — Security checks + package signing
  ###############################################################################
  security-and-sign:
    needs: pytest-coverage
    runs-on: ubuntu-latest
    env:
      COSIGN_KEY_B64:  ${{ secrets.COSIGN_KEY_B64 }}
      COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.13
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      # ─── 3.1 Установим Syft, Grype, Trivy и python-утилиты ───────────────────────────
      - name: Install Syft / Grype / Trivy / Python-helpers
        run: |
          sudo apt-get update -y
          # Syft — генерация SBOM
          curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh \
            | sudo sh -s -- -b /usr/local/bin
          # Grype — сканирование SBOM
          curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh \
            | sudo sh -s -- -b /usr/local/bin
          # Trivy — дополнительный SBOM-скан
          curl -sSfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh \
            | sudo sh -s -- -b /usr/local/bin
          python -m pip install --upgrade pip
          pip install reuse bandit semgrep build

      # ─── 3.2 Генерируем SBOM и сканируем на уязвимости ─────────────────────────────────
      - name: Generate SBOM (Syft → SPDX JSON)
        run: |
          syft . -o spdx-json=spdx.json

      - name: Grype scan (fail on CRITICAL)
        run: |
          grype spdx:spdx.json --fail-on critical

      - name: Save full Grype report (JSON)
        if: always()
        run: |
          grype spdx:spdx.json -o json > grype-report.json || true

      - name: Trivy scan (HIGH,CRITICAL) via SPDX
        run: |
          trivy --severity HIGH,CRITICAL spdx --format json -o trivy-report.json spdx.json
        continue-on-error: true
        # Если найдёт HIGH/CRITICAL, отчёт сохранится, но job не провалится

      # ─── 3.3 Static analysis + проверка лицензий (REUSE) ───────────────────────────────
      - name: REUSE lint (license compliance)
        run: reuse lint || true

      - name: Bandit (security linter)
        run: bandit -r src -f json -o bandit-report.json || true

      - name: Semgrep (OSS rules)
        run: semgrep --config p/ci --sarif-output semgrep.sarif || true

      # ─── 3.4 CodeQL analysis ─────────────────────────────────────────────────────────────
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: python

      - name: Autobuild CodeQL
        uses: github/codeql-action/autobuild@v3

      - name: Run CodeQL analysis
        uses: github/codeql-action/analyze@v3

      # ─── 3.5 Запись Cosign-ключа, если он задан в Secrets ────────────────────────────────
      - name: Decode Cosign private key from Base64
        if: env.COSIGN_KEY_B64 != ''
        run: |
          mkdir -p ~/.cosign
          echo "$COSIGN_KEY_B64" | base64 -d > ~/.cosign/cosign.key
          chmod 600 ~/.cosign/cosign.key

      - name: Install Cosign
        if: env.COSIGN_KEY_B64 != ''
        run: |
          COSIGN_VERSION="v2.2.4"
          curl -LO https://github.com/sigstore/cosign/releases/download/${COSIGN_VERSION}/cosign-linux-amd64
          sudo install cosign-linux-amd64 /usr/local/bin/cosign
          cosign version

      # ─── 3.6 Сборка Python-пакета (wheel + sdist) ────────────────────────────────────
      - name: Build Python package
        run: python -m build --sdist --wheel --outdir dist

      # ─── 3.7 Подпись дистрибутивов (если ключ задан) ───────────────────────────────────
      - name: Cosign sign artifacts
        if: env.COSIGN_KEY_B64 != ''
        run: |
          for f in dist/*.{whl,tar.gz}; do
            cosign sign --key ~/.cosign/cosign.key "$f"
          done

      # ─── 3.8 Загрузка всех полезных артефактов ─────────────────────────────────────────
      - name: Upload SBOM (SPDX)
        uses: actions/upload-artifact@v4
        with:
          name: sbom-spdx
          path: spdx.json

      - name: Upload Grype report
        uses: actions/upload-artifact@v4
        with:
          name: grype-report
          path: grype-report.json

      - name: Upload Trivy report
        uses: actions/upload-artifact@v4
        with:
          name: trivy-report
          path: trivy-report.json

      - name: Upload Bandit report
        uses: actions/upload-artifact@v4
        with:
          name: bandit-report
          path: bandit-report.json

      - name: Upload Semgrep SARIF
        uses: actions/upload-artifact@v4
        with:
          name: semgrep-report
          path: semgrep.sarif

      - name: Upload signed packages
        uses: actions/upload-artifact@v4
        with:
          name: signed-packages
          path: |
            dist/*.whl
            dist/*.tar.gz
            dist/*.sig
