---
name: CI (Paranoid Stage 0)

on:  # yamllint disable-line truthy
  push:
    branches: [main]
    tags: ['v*.*.*']
  pull_request:
    branches: [main]

env:
  PYTHON_VERSION: '3.13'

jobs:
  # ─── ШАГ 1: Lint → Type → Test → Coverage ───────────────────────────────────
  lint_and_test:
    name: Lint & Test & Coverage
    runs-on: ubuntu-latest
    steps:
      - name: 🛎 Checkout repository
        uses: actions/checkout@v4

      - name: ⚙️ Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 🚧 Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: 📦 Install dev‑dependencies (+ black/isort гарантированно)
        run: |
          python -m pip install --upgrade pip setuptools wheel
          if [ -f requirements-dev.txt ]; then
            python -m pip install -r requirements-dev.txt
          fi
          # Всегда ставим black/isort/ruff — вдруг их нет в requirements
          python -m pip install black isort ruff

      - name: 🔍 Run pre‑commit hooks
        run: pre-commit run --all-files

      - name: 🔍 Ruff (lint)
        run: ruff check .

      - name: 🔍 Black (format check)
        run: python -m black --check .

      - name: 🔍 isort (import order)
        run: python -m isort --check-only .

      - name: 🔍 mypy (type check)
        run: mypy src

      - name: 🧪 Pytest + coverage
        run: |
          pytest --maxfail=1 --disable-warnings -q --cov=src
          coverage xml -o coverage.xml
          coverage html -d htmlcov

      - name: 📁 Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: |
            coverage.xml
            htmlcov/

  # ─── ШАГ 2: SBOM → Grype / Trivy ────────────────────────────────────────────
  sbom_scan:
    name: SBOM → Grype / Trivy
    needs: lint_and_test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with: { python-version: ${{ env.PYTHON_VERSION }} }

      - name: 📦 Install Syft / Trivy / Grype (офиц. скрипты)
        run: |
          curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh \
            | sh -s -- -b /usr/local/bin
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh \
            | sh -s -- -b /usr/local/bin
          curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh \
            | sh -s -- -b /usr/local/bin

      - name: ⚙️ Generate SBOM (CycloneDX JSON, исключаем .github)
        run: syft . -o cyclonedx-json=sbom.json -x .github

      - name: 🔎 Grype scan (fail‑on medium)
        run: grype sbom:sbom.json --fail-on medium

      - name: 🔎 Trivy scan
        run: |
          trivy sbom --format cyclonedx --output sbom-cdx.json .
          trivy fs --severity HIGH,CRITICAL --exit-code 1 .

      - name: 🏷 Upload SBOM
        uses: actions/upload-artifact@v4
        with:
          name: sbom-json
          path: sbom.json

  # ─── ШАГ 3: Semgrep Static Analysis ─────────────────────────────────────────
  semgrep_scan:
    name: Semgrep Static Analysis
    needs: sbom_scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: python -m pip install semgrep
      - uses: returntocorp/semgrep-action@v2
        with: { config: "p/ci" }

  # ─── ШАГ 4: CodeQL Analysis ────────────────────────────────────────────────
  codeql_analysis:
    name: CodeQL Analysis
    needs: semgrep_scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: github/codeql-action/init@v3
        with: { languages: python }
      - uses: github/codeql-action/autobuild@v3
      - uses: github/codeql-action/analyze@v3

  # ─── ШАГ 5: Sign & Release (по тегу v*) ─────────────────────────────────────
  sign_and_release:
    name: Sign Artifacts & Publish Release
    if: startsWith(github.ref, 'refs/tags/v')
    needs: codeql_analysis
    runs-on: ubuntu-latest
    env:
      COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}
      VAULT_ADDR:      ${{ secrets.VAULT_ADDR }}
      VAULT_TOKEN:     ${{ secrets.VAULT_TOKEN }}

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with: { python-version: ${{ env.PYTHON_VERSION }} }

      - run: |
          python -m pip install --upgrade pip setuptools wheel build cosign

      - name: (Optional) Fetch Cosign key from Vault
        if: ${{ env.VAULT_ADDR && env.VAULT_TOKEN }}
        uses: hashicorp/vault-action@v2
        id: vault
        with:
          url:    ${{ env.VAULT_ADDR }}
          method: token
          token:  ${{ env.VAULT_TOKEN }}
          path:   secret/data/cosign

      - name: Write Cosign Private Key
        if: steps.vault.outputs['secret/data/cosign']
        run: |
          echo "${{ steps.vault.outputs['secret/data/cosign'] }}" | base64 -d > cosign.key
          chmod 600 cosign.key

      - run: python -m build

      - id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body: |
            ✅ Линты/типы/тесты пройдены  
            ✅ SBOM + Grype/Trivy — «medium‑free»  
            ✅ Semgrep + CodeQL  
            📑 Артефакты подписаны Cosign

      - run: cosign sign --key cosign.key dist/*.tar.gz dist/*.whl

      - uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          files: |
            dist/*.tar.gz
            dist/*.whl
            cosign.pub

      - run: echo "✅ Релиз завершён — обнови бейджи README при необходимости."
