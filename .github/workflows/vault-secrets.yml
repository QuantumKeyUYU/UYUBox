name: Vault Secret Injection

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  fetch-secrets:
    name: 🔐 Fetch and Inject Vault Secrets
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Authenticate with Vault
        # зафиксировали до безопасной версии, чтобы Grype больше не ругался
        uses: hashicorp/vault-action@v2.2.0
        with:
          url: ${{ secrets.VAULT_ADDR }}
          method: approle
          roleId: ${{ secrets.VAULT_ROLE_ID }}
          secretId: ${{ secrets.VAULT_SECRET_ID }}

      - name: Fetch application secrets
        id: vault-secrets
        run: |
          # Пример: получаем креды для БД
          DB_URL=$(vault kv get -field=url secret/data/db)
          DB_USER=$(vault kv get -field=username secret/data/db)
          DB_PASS=$(vault kv get -field=password secret/data/db)
          # Экспортируем в переменные среды для остальных шагов
          echo "DB_URL=$DB_URL" >> $GITHUB_ENV
          echo "DB_USER=$DB_USER" >> $GITHUB_ENV
          echo "DB_PASS=$DB_PASS" >> $GITHUB_ENV

  test-with-secrets:
    name: 🧪 Run tests with Vault secrets
    needs: fetch-secrets
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.10, 3.11, 3.12]
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: pip install -e .[dev] hvac

      - name: Run tests with secrets
        env:
          DATABASE_URL: ${{ env.DB_URL }}
          DATABASE_USER: ${{ env.DB_USER }}
          DATABASE_PASS: ${{ env.DB_PASS }}
        run: pytest --maxfail=1 --disable-warnings -q
