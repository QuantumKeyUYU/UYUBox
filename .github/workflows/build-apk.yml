name: Build Android APK

on:
  push:
    branches: [ main ]
  pull_request:
  workflow_dispatch:

jobs:
  debug-apk:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: System deps
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential zip unzip openjdk-11-jdk \
              zlib1g-dev libncurses5 libffi-dev libssl-dev libsqlite3-dev \
              libbz2-dev libreadline-dev

      - name: Pip deps
        run: |
          python -m pip install --upgrade pip
          pip install cython buildozer

      - name: Cache .buildozer
        uses: actions/cache@v4
        with:
          path: .buildozer
          key: buildozer-${{ runner.os }}-${{ hashFiles('buildozer.spec') }}
          restore-keys: |
            buildozer-${{ runner.os }}-

      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: ~/.gradle/caches
          key: gradle-${{ runner.os }}-${{ hashFiles('buildozer.spec') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      - name: Build debug
        run: |
          buildozer -v android debug

      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: ZilantPrimeMobile-debug-apk
          path: bin/*-debug.apk

  # ---- OPTIONAL: релиз с подписью через секреты (включи при готовности) ----
  # release-apk:
  #   if: startsWith(github.ref, 'refs/tags/')
  #   runs-on: ubuntu-22.04
  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: actions/setup-python@v5
  #       with:
  #         python-version: "3.10"
  #     - run: |
  #         sudo apt-get update
  #         sudo apt-get install -y build-essential zip unzip openjdk-11-jdk \
  #             zlib1g-dev libncurses5 libffi-dev libssl-dev libsqlite3-dev
  #     - run: |
  #         python -m pip install --upgrade pip
  #         pip install cython buildozer
  #     - name: Restore caches
  #       uses: actions/cache@v4
  #       with:
  #         path: .buildozer
  #         key: buildozer-${{ runner.os }}-${{ hashFiles('buildozer.spec') }}
  #     - name: Decode keystore
  #       run: |
  #         echo "$KEYSTORE_BASE64" | base64 -d > release.keystore
  #       env:
  #         KEYSTORE_BASE64: ${{ secrets.ANDROID_KEYSTORE_B64 }}
  #     - name: Build release (signed)
  #       env:
  #         P4A_RELEASE_KEYSTORE: release.keystore
  #         P4A_RELEASE_KEYSTORE_PASSWD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
  #         P4A_RELEASE_KEYALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
  #         P4A_RELEASE_KEYALIAS_PASSWD: ${{ secrets.ANDROID_KEY_PASSWORD }}
  #       run: |
  #         buildozer -v android release
  #     - uses: actions/upload-artifact@v4
  #       with:
  #         name: ZilantPrimeMobile-release-apk
  #         path: bin/*-release.apk
